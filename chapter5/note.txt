2016-10-31

第五章

指针和字符串

字符串通常以字符指针的形式传递给函数和从函数返回。我们可以使用字符指针传递字符串，也可以使用字符串
常量的指针传递字符串。
字符串是以ASCII字符NUL结尾的字符序列。ASCII字符NUL表示为：\0.字符串通常存储在数组或者从堆上分配的
内存中。

c中有两种类型的字符串
由char数据类型组成的序列

宽字符串
由wchar_t数据类型组成的序列。

字符串的长度是字符串除了nul字符之外的字符数。为字符串分配内存时，要记得为所有的字符再加上nul字符分配足够的
空间。

记住null和nul不同。null用来表示特殊指针，通常定义为：((void*)0),而nul是一个char，定义为：\0，两者不能混用

字符串声明

声明字符串的方式有三种：自面量，字符数组，和字符指针。字面量是双引号引起来的字符序列，常用来初始化，它们位于字符串
字面量池中。单引号引起来的是字符字面量。字符串字面量一般分配在只读内存中，所以是不可变的。字符串字面量在哪里使用
或者它是全局，静态，或局部的都无关紧要，从这个角度讲，字符串字面量不存在作用域的概念。

char *header = (char*)malloc(strlen("Media Player") + 1);

在决定malloc函数要用到的字符串长度时，要注意以下事项：

一定要记得算上nul终止符
不要用sizeof操作符，而是使用strlen函数来确定已有字符串的长度。
sizeof操作符会返回数组和指针的长度，而不是字符串的长度。

试图使用字符字面量来初始化char指针不会起作用。因为字符字面量是int类型，这其实是尝试把整数赋值给字符指针。
这样做会造成应用程序在解引指针时终止：

char *prefix = '+' //不合法

正确的做法是：
prefix = (char*)malloc(2)
*prefix = '+'
*(prefix + 1) = 0;


知道的字符串存储的位置对理解程序的工作原理及用指针访问字符串有帮助。字符串的位置决定它能存在多久，以及程序
的哪些部分可以访问它。比如说，，分配在全局内存的字符串会一直存在，也可以被多个函数访问；静态字符串也一直存在
不过只有定义它们的函数才能访问，分配在堆上的内存在释放前会一直存在，也可以被多个函数访问。






