2016-10-28

chapter2 C language dynamic memory management

VLA:变长数组	数组长度在运行时确定而不是在编译时确定
c语言支持动态内存分配，对象就是从堆内分配出来的。这是用分配和释放函数手动实现的，这个过程称为动态内存管理。

动态内存分配

在c中动态分配内存的基本步骤有：

用malloc类的函数分配内存
用这些内存支持应用程序
用free函数释放内存

使用malloc分配内存时，使用sizeof使程序更容易移植，这样不管程序在哪里运行都会返回正确的长度。
每次调用malloc函数后，程序结束时必须有对应的free函数调用，以防止内存泄露。

一旦内存被释放，就不应该去访问它了，通常的做法是把被释放的指针赋值为null。


动态分配函数

函数					描述

malloc			从堆上分配内存

realloc			在之前分配内存块的基础上，将内存重新分配为更大或更小的部分

calloc			从堆上分配内存并清零

free			将内存块返回堆


动态从堆上分配的内存，至于一连内存分配调用，系统不保证内存的顺序和所分配内存的连续性。不过，分配的内存会根据
指针的数据类型对齐。比如说四字节的整数会分配在能被四整除的地址边界上。堆管理器返回的地址是最低字节的地址

执行malloc函数时会进行以下操作：

从堆上分配内存
内存不会被修改或是清空
返回首字节的地址

当malloc无法分配内存时会返回null，在使用它返回的指针之前先检查null是不错的做法

初始化静态或全局变量时不能调用函数。

calloc申请内存时会清零所申请的内存区，清空的意思是将其内容置为二进制零

calloc函数定义为：

void *calloc(size_t numElements,size_t elementSize)

calloc函数会根据numElements和elementSize的乘积来分配内存，并返回一个指向内存的第一个字节的指针。
如果不能分配足够的内存。则返回null。

下列为pi分配了20字节,全部包含零。
int *pi = (int*)calloc(5,sizeof(int))

使用malloc可以达到同样的效果

int *pi = (int*)malloc(5 * sizeof(int));
memset(pi,0,5 * sizeof(int));

memset 第一个参数pi用来指示清空内存区的地址，第二个参数0用来填充格式化后的内存区的内容
	   第三个参数5*sizeof(int)用来指示填充内存区的大小。
	
如果内存需要清零可以使用calloc，不过执行calloc可能要比malloc慢。

reallc函数原型如下：

void *relloc(void *ptr,size_t size)

relloc 第一个参数ptr为原内存块的指针，第二个size为请求的大小。返回值重新指向重新分配的内存。
请求的大小可以比当前分配的字节数大也可以小，多余的会返还给堆，不能保证多余的内存会被清空。如果
比当前的大，那么可能的话就紧挨着当前分配内存的区域分配新的内存，否则就在堆的其它区域分配把旧的
内存复制到新区域。
如果大小是0而指针非空，那么就释放内存。如果无法分配，那么原来的内存区域保持不变，并返回空指针。

应该在同一管理层内分配和释放内存，比如说如果在函数内分配内存，那么就应该在同一个函数内释放，并将已释放
的指针设置为null。






















