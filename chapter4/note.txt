2016-10-30

第四章	指针和数组

数组概述

数组是能用索引访问的同质元素连续集合，这里所说的连续是指数组的元素在内存中是相邻的，中间不存在
间隙，而同质都是同一类型的。数组声名用的是方括号集合，可以拥有多个维度。

C99标准之前数组长度是固定的，当我们声名数组时，需要决定该数组有多大。如果指定过多元素就会浪费空间
而指定过少元素会限制能够处理的元素数量，relloc函数和变长数组提供了应对长度需要变化的数组技术，使我们能
调整数组长度，占用合适的内存。

指针表示法和数组

指针在处理数组时很拥有，可以使用指针指向已有的数组，也可以从堆上分配然后把这块内存当作一个数组使用。数组表示法
和指针表示法在某种意义上可以互换。不过它们并不完全相同。

int vector[5] = {1,2,3,4,5}
int *pv = vector
pv变量指向数组第一个元素，而不是指向数组本身的指针。给pv赋值是把数组第一个元素的地址赋给pv

数组和指针的差别

int vector[5] = {1,2,3,4,5};
int *pv = vector;

vector[i]生成的代码和*(vector+i)生成的不一样，vector[i]表示发生成的机器码从位置vector开始，移动i个位置，
取出内容。而*(vector+i）表示法生成的机器码则是从vector开始，在地址上增加i，然后取出这个地址中的内容。尽管
结果一样，但是生成的机器码却不一样，对于大部分人来说这种差别无足轻重。

sizeof操作符对数组和同一个数组的指针操作也是不同的，对vector调用sizeof操作符会返回20,就是这个数组分配的字节数
对pv调用sizeof操作符会返回4，就是指针的长度。


传递一维数组

将一维数组作为参数传递给函数实际是通过值来传递数组的地址，这样信息传递就更高效，因为我们不需要传递整个数组，从而也就不需要
在栈上分配内存。通常，这也意味着要传递整个数组，否则在函数看来们我们只有数组的地址而不知道其长度。


传递多维数组

给函数传递多维数组很容易让人迷惑，尤其是在用指针表示法的情况下。传递多维数组时，我们决定在函数签名中使用数组表示法还是指针表示
法，还有就是数组的形态，这里的形态是指数组的维数及每一维的大小。要想在函数内部使用数组表示法必须指定数组的形态，否则编译器就无法
使用下标。函数签名是指函数原型声明。




















