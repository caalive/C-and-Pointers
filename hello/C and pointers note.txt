2016-10-27

不同内存的变量和生命周期
											作用域						生命周期
											
全局内存										整个文件						应用程序的生命周期					

静态内存										声明它的函数内部				应用程序的生命周期

自动内存（局部内存）							声明它的函数内部				限制在函数执行时间内
	
动态内存										由引用该内存的指针决定			直到内存释放


对象就是内存分配函数比如malloc分配的内存


指针的用途：

写出快速高效的代码
为解决很多类问题提供方便的途径
支持动态内存分配
使表达式变得紧凑和简洁
提供使用指针传递数据结构的能力而不会带来庞大的开销
保护作为参数传递给函数的数据

void 指针是通用指针，用来存放任何数据类型的引用。

void *pv 

void指针具有与char指针相同的形式和内存对其方式
void指针和别的指针永远不会相等，不过两个被赋值为null的void指针是相等的

任何指针都可以被赋值为void指针，它可以被转换为原来的指针类型，这样的话指针的值和原来的值是相等的


数据指针的长度通常都是一样的与数据类型无关


指针相关的预定义类型：

size_t ：用于安全地表示长度
		size_t 类型表示c中任何对象所能表达的最大长度。它是无符号整数它的目的是提供一种可移植的方法来声明与系统中可寻址的内存区域的一致长度。
		size_t用作sizeof操作符的返回值类型，同时也是很多函数的参数类型，包括malloc和strlen
		size_t的声明是和实现相关的，它出现在一个或多个标准头文件中比如stdio.h和stdlib.h它的典型定义如下：
		
		＃ifndef	 __SIZE_T 
		#define  __SIZE_T
		typedef unsigned int size_t;
		#endif


prtdiff_t：用于处理指针算术运算

inprt_t和uintptr_t：用于存储指针地址
		inptr_t和uinptr_t类型用来存放指针地址。它们提供了一种可移植且安全的方法声明指针，而且和系统中使用的指针长度相同，对于把指针转化为整数来说很有用
		
		
		
		
		
指针操作符

操作符		名称					含义

*								用来声明指针

*			解引					用来解引指针		

->			指向					用来访问指针引用的结构的字段

+			加					对指针做加法

-			减					对指针做减法

==!=		相等不等				比较两个指针

>>=<<=		大于等于小于等于		比较两个指针

(数据类型)	转换					改变指针的类型	



指针算术运算

给指针加上整数
	给指针加上一个整数就是这个整数和指针数据类型对应字节数的乘积

给指针减去整数
两个指针相减
比较两个指针


常量指针	int *const cpi = &num
	指针不可变,声明时必须初始化
	
指针常量	const *int pci
	指针指向的常量不可变



		
		











